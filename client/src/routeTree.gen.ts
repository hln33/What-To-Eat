/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as RecipesNewImport } from './routes/recipes/new'
import { Route as RecipesRecipeIdImport } from './routes/recipes/$recipeId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RecipesNewRoute = RecipesNewImport.update({
  id: '/recipes/new',
  path: '/recipes/new',
  getParentRoute: () => rootRoute,
} as any)

const RecipesRecipeIdRoute = RecipesRecipeIdImport.update({
  id: '/recipes/$recipeId',
  path: '/recipes/$recipeId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/recipes/$recipeId': {
      id: '/recipes/$recipeId'
      path: '/recipes/$recipeId'
      fullPath: '/recipes/$recipeId'
      preLoaderRoute: typeof RecipesRecipeIdImport
      parentRoute: typeof rootRoute
    }
    '/recipes/new': {
      id: '/recipes/new'
      path: '/recipes/new'
      fullPath: '/recipes/new'
      preLoaderRoute: typeof RecipesNewImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/new': typeof RecipesNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/new': typeof RecipesNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/new': typeof RecipesNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/recipes/$recipeId' | '/recipes/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/recipes/$recipeId' | '/recipes/new'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/signup'
    | '/recipes/$recipeId'
    | '/recipes/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  RecipesRecipeIdRoute: typeof RecipesRecipeIdRoute
  RecipesNewRoute: typeof RecipesNewRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  RecipesRecipeIdRoute: RecipesRecipeIdRoute,
  RecipesNewRoute: RecipesNewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/signup",
        "/recipes/$recipeId",
        "/recipes/new"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/recipes/$recipeId": {
      "filePath": "recipes/$recipeId.tsx"
    },
    "/recipes/new": {
      "filePath": "recipes/new.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
